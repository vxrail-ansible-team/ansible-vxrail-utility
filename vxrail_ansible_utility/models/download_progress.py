# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DownloadProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'update_id': 'int',
        'status': 'str',
        'progress': 'int',
        'message': 'str',
        'error_message': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'download_directory': 'str',
        'downloaded_files': 'list[DownloadProgressDownloadedFiles]'
    }

    attribute_map = {
        'request_id': 'requestID',
        'update_id': 'updateID',
        'status': 'status',
        'progress': 'progress',
        'message': 'message',
        'error_message': 'errorMessage',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'download_directory': 'downloadDirectory',
        'downloaded_files': 'downloadedFiles'
    }

    def __init__(self, request_id=None, update_id=None, status=None, progress=None, message=None, error_message=None, start_time=None, end_time=None, download_directory=None, downloaded_files=None):  # noqa: E501
        """DownloadProgress - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._update_id = None
        self._status = None
        self._progress = None
        self._message = None
        self._error_message = None
        self._start_time = None
        self._end_time = None
        self._download_directory = None
        self._downloaded_files = None
        self.discriminator = None
        self.request_id = request_id
        if update_id is not None:
            self.update_id = update_id
        self.status = status
        self.progress = progress
        if message is not None:
            self.message = message
        if error_message is not None:
            self.error_message = error_message
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if download_directory is not None:
            self.download_directory = download_directory
        if downloaded_files is not None:
            self.downloaded_files = downloaded_files

    @property
    def request_id(self):
        """Gets the request_id of this DownloadProgress.  # noqa: E501

        Unique identifier of the download request  # noqa: E501

        :return: The request_id of this DownloadProgress.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DownloadProgress.

        Unique identifier of the download request  # noqa: E501

        :param request_id: The request_id of this DownloadProgress.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def update_id(self):
        """Gets the update_id of this DownloadProgress.  # noqa: E501

        Identifier of the update being downloaded  # noqa: E501

        :return: The update_id of this DownloadProgress.  # noqa: E501
        :rtype: int
        """
        return self._update_id

    @update_id.setter
    def update_id(self, update_id):
        """Sets the update_id of this DownloadProgress.

        Identifier of the update being downloaded  # noqa: E501

        :param update_id: The update_id of this DownloadProgress.  # noqa: E501
        :type: int
        """

        self._update_id = update_id

    @property
    def status(self):
        """Gets the status of this DownloadProgress.  # noqa: E501

        Current status of the download  # noqa: E501

        :return: The status of this DownloadProgress.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DownloadProgress.

        Current status of the download  # noqa: E501

        :param status: The status of this DownloadProgress.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["STARTED", "IN_PROGRESS", "COMPLETED", "FAILED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def progress(self):
        """Gets the progress of this DownloadProgress.  # noqa: E501

        Download progress percentage (0-100)  # noqa: E501

        :return: The progress of this DownloadProgress.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DownloadProgress.

        Download progress percentage (0-100)  # noqa: E501

        :param progress: The progress of this DownloadProgress.  # noqa: E501
        :type: int
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def message(self):
        """Gets the message of this DownloadProgress.  # noqa: E501

        Status message  # noqa: E501

        :return: The message of this DownloadProgress.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DownloadProgress.

        Status message  # noqa: E501

        :param message: The message of this DownloadProgress.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def error_message(self):
        """Gets the error_message of this DownloadProgress.  # noqa: E501

        Error message if download failed  # noqa: E501

        :return: The error_message of this DownloadProgress.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DownloadProgress.

        Error message if download failed  # noqa: E501

        :param error_message: The error_message of this DownloadProgress.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def start_time(self):
        """Gets the start_time of this DownloadProgress.  # noqa: E501

        Download start time in ISO format  # noqa: E501

        :return: The start_time of this DownloadProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DownloadProgress.

        Download start time in ISO format  # noqa: E501

        :param start_time: The start_time of this DownloadProgress.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DownloadProgress.  # noqa: E501

        Download end time in ISO format  # noqa: E501

        :return: The end_time of this DownloadProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DownloadProgress.

        Download end time in ISO format  # noqa: E501

        :param end_time: The end_time of this DownloadProgress.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def download_directory(self):
        """Gets the download_directory of this DownloadProgress.  # noqa: E501

        Target directory for downloaded files  # noqa: E501

        :return: The download_directory of this DownloadProgress.  # noqa: E501
        :rtype: str
        """
        return self._download_directory

    @download_directory.setter
    def download_directory(self, download_directory):
        """Sets the download_directory of this DownloadProgress.

        Target directory for downloaded files  # noqa: E501

        :param download_directory: The download_directory of this DownloadProgress.  # noqa: E501
        :type: str
        """

        self._download_directory = download_directory

    @property
    def downloaded_files(self):
        """Gets the downloaded_files of this DownloadProgress.  # noqa: E501

        List of files downloaded in this session  # noqa: E501

        :return: The downloaded_files of this DownloadProgress.  # noqa: E501
        :rtype: list[DownloadProgressDownloadedFiles]
        """
        return self._downloaded_files

    @downloaded_files.setter
    def downloaded_files(self, downloaded_files):
        """Sets the downloaded_files of this DownloadProgress.

        List of files downloaded in this session  # noqa: E501

        :param downloaded_files: The downloaded_files of this DownloadProgress.  # noqa: E501
        :type: list[DownloadProgressDownloadedFiles]
        """

        self._downloaded_files = downloaded_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DownloadProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DownloadProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
