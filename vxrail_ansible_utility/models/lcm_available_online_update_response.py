# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LcmAvailableOnlineUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'version': 'str',
        'file_path': 'str',
        'title': 'str',
        'description': 'str',
        'is_recommend': 'bool',
        'publish_date': 'datetime',
        'type': 'str',
        'links': 'list[AvailableOnlineUpdateLink]'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'file_path': 'file_path',
        'title': 'title',
        'description': 'description',
        'is_recommend': 'is_recommend',
        'publish_date': 'publish_date',
        'type': 'type',
        'links': 'links'
    }

    def __init__(self, id=None, version=None, file_path=None, title=None, description=None, is_recommend=None, publish_date=None, type='FULL_BUNDLE', links=None):  # noqa: E501
        """LcmAvailableOnlineUpdateResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._file_path = None
        self._title = None
        self._description = None
        self._is_recommend = None
        self._publish_date = None
        self._type = None
        self._links = None
        self.discriminator = None
        self.id = id
        self.version = version
        if file_path is not None:
            self.file_path = file_path
        self.title = title
        if description is not None:
            self.description = description
        if is_recommend is not None:
            self.is_recommend = is_recommend
        if publish_date is not None:
            self.publish_date = publish_date
        self.type = type
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Unique identifier of the update  # noqa: E501

        :return: The id of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LcmAvailableOnlineUpdateResponse.

        Unique identifier of the update  # noqa: E501

        :param id: The id of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self):
        """Gets the version of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Version of the update  # noqa: E501

        :return: The version of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LcmAvailableOnlineUpdateResponse.

        Version of the update  # noqa: E501

        :param version: The version of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def file_path(self):
        """Gets the file_path of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        File path of the update bundle  # noqa: E501

        :return: The file_path of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this LcmAvailableOnlineUpdateResponse.

        File path of the update bundle  # noqa: E501

        :param file_path: The file_path of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def title(self):
        """Gets the title of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Title of the update  # noqa: E501

        :return: The title of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LcmAvailableOnlineUpdateResponse.

        Title of the update  # noqa: E501

        :param title: The title of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Description of the update  # noqa: E501

        :return: The description of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LcmAvailableOnlineUpdateResponse.

        Description of the update  # noqa: E501

        :param description: The description of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_recommend(self):
        """Gets the is_recommend of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Whether this update is recommended  # noqa: E501

        :return: The is_recommend of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_recommend

    @is_recommend.setter
    def is_recommend(self, is_recommend):
        """Sets the is_recommend of this LcmAvailableOnlineUpdateResponse.

        Whether this update is recommended  # noqa: E501

        :param is_recommend: The is_recommend of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: bool
        """

        self._is_recommend = is_recommend

    @property
    def publish_date(self):
        """Gets the publish_date of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Publication date of the update  # noqa: E501

        :return: The publish_date of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this LcmAvailableOnlineUpdateResponse.

        Publication date of the update  # noqa: E501

        :param publish_date: The publish_date of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: datetime
        """

        self._publish_date = publish_date

    @property
    def type(self):
        """Gets the type of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Type of the bundle  # noqa: E501

        :return: The type of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LcmAvailableOnlineUpdateResponse.

        Type of the bundle  # noqa: E501

        :param type: The type of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["FULL_BUNDLE", "ADC_SINGLE_PATCH"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def links(self):
        """Gets the links of this LcmAvailableOnlineUpdateResponse.  # noqa: E501

        Related links for the update  # noqa: E501

        :return: The links of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :rtype: list[AvailableOnlineUpdateLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LcmAvailableOnlineUpdateResponse.

        Related links for the update  # noqa: E501

        :param links: The links of this LcmAvailableOnlineUpdateResponse.  # noqa: E501
        :type: list[AvailableOnlineUpdateLink]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LcmAvailableOnlineUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LcmAvailableOnlineUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
