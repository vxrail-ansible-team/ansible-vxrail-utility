# coding: utf-8

"""
    VxRail REST API

    The VxRail REST API provides a programmatic interface for performing VxRail administrative tasks. Data is available in JSON format.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZeroDayPatchStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step': 'str',
        'status': 'str',
        'progress_percent': 'int',
        'progress_message': 'str',
        'witness_upgrade': 'bool',
        'bundle_name': 'str',
        'error': 'list[str]',
        'precheck_state': 'str',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'step': 'step',
        'status': 'status',
        'progress_percent': 'progress_percent',
        'progress_message': 'progress_message',
        'witness_upgrade': 'witness_upgrade',
        'bundle_name': 'bundle_name',
        'error': 'error',
        'precheck_state': 'precheck_state',
        'last_updated': 'last_updated'
    }

    def __init__(self, step=None, status=None, progress_percent=None, progress_message=None, witness_upgrade=None, bundle_name=None, error=None, precheck_state=None, last_updated=None):  # noqa: E501
        """ZeroDayPatchStatus - a model defined in Swagger"""  # noqa: E501
        self._step = None
        self._status = None
        self._progress_percent = None
        self._progress_message = None
        self._witness_upgrade = None
        self._bundle_name = None
        self._error = None
        self._precheck_state = None
        self._last_updated = None
        self.discriminator = None
        if step is not None:
            self.step = step
        if status is not None:
            self.status = status
        if progress_percent is not None:
            self.progress_percent = progress_percent
        if progress_message is not None:
            self.progress_message = progress_message
        if witness_upgrade is not None:
            self.witness_upgrade = witness_upgrade
        if bundle_name is not None:
            self.bundle_name = bundle_name
        if error is not None:
            self.error = error
        if precheck_state is not None:
            self.precheck_state = precheck_state
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def step(self):
        """Gets the step of this ZeroDayPatchStatus.  # noqa: E501


        :return: The step of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this ZeroDayPatchStatus.


        :param step: The step of this ZeroDayPatchStatus.  # noqa: E501
        :type: str
        """

        self._step = step

    @property
    def status(self):
        """Gets the status of this ZeroDayPatchStatus.  # noqa: E501


        :return: The status of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ZeroDayPatchStatus.


        :param status: The status of this ZeroDayPatchStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def progress_percent(self):
        """Gets the progress_percent of this ZeroDayPatchStatus.  # noqa: E501


        :return: The progress_percent of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this ZeroDayPatchStatus.


        :param progress_percent: The progress_percent of this ZeroDayPatchStatus.  # noqa: E501
        :type: int
        """

        self._progress_percent = progress_percent

    @property
    def progress_message(self):
        """Gets the progress_message of this ZeroDayPatchStatus.  # noqa: E501


        :return: The progress_message of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._progress_message

    @progress_message.setter
    def progress_message(self, progress_message):
        """Sets the progress_message of this ZeroDayPatchStatus.


        :param progress_message: The progress_message of this ZeroDayPatchStatus.  # noqa: E501
        :type: str
        """

        self._progress_message = progress_message

    @property
    def witness_upgrade(self):
        """Gets the witness_upgrade of this ZeroDayPatchStatus.  # noqa: E501


        :return: The witness_upgrade of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: bool
        """
        return self._witness_upgrade

    @witness_upgrade.setter
    def witness_upgrade(self, witness_upgrade):
        """Sets the witness_upgrade of this ZeroDayPatchStatus.


        :param witness_upgrade: The witness_upgrade of this ZeroDayPatchStatus.  # noqa: E501
        :type: bool
        """

        self._witness_upgrade = witness_upgrade

    @property
    def bundle_name(self):
        """Gets the bundle_name of this ZeroDayPatchStatus.  # noqa: E501


        :return: The bundle_name of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this ZeroDayPatchStatus.


        :param bundle_name: The bundle_name of this ZeroDayPatchStatus.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    @property
    def error(self):
        """Gets the error of this ZeroDayPatchStatus.  # noqa: E501


        :return: The error of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ZeroDayPatchStatus.


        :param error: The error of this ZeroDayPatchStatus.  # noqa: E501
        :type: list[str]
        """

        self._error = error

    @property
    def precheck_state(self):
        """Gets the precheck_state of this ZeroDayPatchStatus.  # noqa: E501


        :return: The precheck_state of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._precheck_state

    @precheck_state.setter
    def precheck_state(self, precheck_state):
        """Sets the precheck_state of this ZeroDayPatchStatus.


        :param precheck_state: The precheck_state of this ZeroDayPatchStatus.  # noqa: E501
        :type: str
        """

        self._precheck_state = precheck_state

    @property
    def last_updated(self):
        """Gets the last_updated of this ZeroDayPatchStatus.  # noqa: E501


        :return: The last_updated of this ZeroDayPatchStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ZeroDayPatchStatus.


        :param last_updated: The last_updated of this ZeroDayPatchStatus.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZeroDayPatchStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZeroDayPatchStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
